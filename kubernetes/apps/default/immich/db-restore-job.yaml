---
# yaml-language-server: $schema=https://kubernetesjsonschema.dev/v1.14.0/job-batch-v1.json
apiVersion: batch/v1
kind: Job
metadata:
  name: immich-db-migration
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "1"
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: immich-db-migration
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command:
        - sh
        - -c
        - |
          echo "Waiting for PostgreSQL to be ready..."
          until nc -z immich-postgres-rw.default.svc.cluster.local 5432; do
            echo "PostgreSQL not ready, waiting..."
            sleep 5
          done
          echo "PostgreSQL is ready!"
      - name: download-backup
        image: amazon/aws-cli:2.15.0
        env:
        - name: AWS_ENDPOINT_URL
          value: ${S3_ENDPOINT}
        - name: AWS_ACCESS_KEY_ID
          value: ${S3_ACCESS_KEY_ID}
        - name: AWS_SECRET_ACCESS_KEY
          value: ${S3_SECRET_ACCESS_KEY}
        - name: AWS_DEFAULT_REGION
          value: ${S3_REGION}
        command:
        - sh
        - -c
        - |
          set -e
          echo "Downloading backup from S3..."

          # Download backup from S3
          aws s3 cp s3://immich-backups/immich_backup.sql /backup/immich_backup.sql || {
            echo "Failed to download backup from S3. Database will be initialized fresh by Immich."
            touch /backup/no-backup
            exit 0
          }

          echo "Backup downloaded successfully: $(ls -lh /backup/immich_backup.sql)"
        volumeMounts:
        - name: backup-storage
          mountPath: /backup
      containers:
      - name: db-migrate
        image: postgres:17
        envFrom:
        - secretRef:
            name: immich-secret
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: immich-secret
              key: DB_PASSWORD
        command:
        - sh
        - -c
        - |
          set -e
          echo "Starting database migration..."

          # Check if database already has data
          EXISTING_TABLES=$(psql -h "$DB_HOSTNAME" -U "$DB_USERNAME" -d "$DB_DATABASE_NAME" -t -c "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "0")

          if [ "$EXISTING_TABLES" -gt "5" ]; then
            echo "Database already appears to have data ($EXISTING_TABLES tables). Skipping migration."
            exit 0
          fi

          echo "Database appears empty. Checking for backup..."

          # Check if backup download failed
          if [ -f "/backup/no-backup" ]; then
            echo "No backup available. Database will be initialized fresh by Immich application."
            exit 0
          fi

          # Check if backup exists
          if [ ! -f "/backup/immich_backup.sql" ]; then
            echo "No backup file found. Database will be initialized fresh by Immich application."
            exit 0
          fi

          echo "Backup found: $(ls -lh /backup/immich_backup.sql)"
          echo "Restoring database from backup..."

          # Restore database from backup
          psql -h "$DB_HOSTNAME" -U "$DB_USERNAME" -d "$DB_DATABASE_NAME" -f /backup/immich_backup.sql

          # Verify restore
          RESTORED_TABLES=$(psql -h "$DB_HOSTNAME" -U "$DB_USERNAME" -d "$DB_DATABASE_NAME" -t -c "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';")
          echo "Database restore completed! Restored $RESTORED_TABLES tables"

          # Sample data check
          ASSET_COUNT=$(psql -h "$DB_HOSTNAME" -U "$DB_USERNAME" -d "$DB_DATABASE_NAME" -t -c "SELECT COUNT(*) FROM assets;" 2>/dev/null || echo "0")
          echo "Assets found: $ASSET_COUNT"

          echo "Migration job completed successfully!"
        volumeMounts:
        - name: backup-storage
          mountPath: /backup
      volumes:
      - name: backup-storage
        emptyDir: {}
